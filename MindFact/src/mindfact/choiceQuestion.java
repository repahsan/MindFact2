/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mindfact;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;

/**
 *
 * @author Jeekkee
 */
public class choiceQuestion extends javax.swing.JFrame {

    Connection conn = null;
    Controller cont = new Controller();
    public static String diff3;
    public static String differ3;
    
    
    
    /**
     * Creates new form easyQuestion
     */
    public choiceQuestion() {
        initComponents();

    }
    //public void fetch(){

    public choiceQuestion(String para, int choi, String differ) {
        initComponents();
        questionField.setText(para);
        questionField.setEditable(false);
        Database.getDatabase();
        System.out.println("choices random");
        System.out.println(choi);
        try {
            String sql = "select * from "+differ+" where letter = 'a' and question_id = " + choi + "";
            Database.rs = Database.st.executeQuery(sql);
            while (Database.rs.next()) {
                String choice1 = Database.rs.getString("answer");
                choiceA.setText(choice1);
            }
        } catch (Exception ex) {
            System.out.println("no data");
        }

        try {
            String sql = "select * from "+differ+" where letter = 'b' and question_id = " + choi + "";
            Database.rs = Database.st.executeQuery(sql);
            while (Database.rs.next()) {
                String choice2 = Database.rs.getString("answer");
                choiceB.setText(choice2);
            }
        } catch (Exception ex) {
            System.out.println("no data");
        }

        try {
            String sql = "select * from "+differ+" where letter = 'c' and question_id = " + choi + "";
            Database.rs = Database.st.executeQuery(sql);
            while (Database.rs.next()) {
                String choice3 = Database.rs.getString("answer");
                choiceC.setText(choice3);
            }
        } catch (Exception ex) {
            System.out.println("no data");
        }

        try {
            String sql = "select * from "+differ+" where letter = 'd' and question_id = " + choi + "";
            Database.rs = Database.st.executeQuery(sql);
            while (Database.rs.next()) {
                String choice4 = Database.rs.getString("answer");
                choiceD.setText(choice4);
            }
        } catch (Exception ex) {
            System.out.println("no data");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        questionField = new javax.swing.JTextArea();
        choiceA = new javax.swing.JLabel();
        choiceAA = new javax.swing.JButton();
        choiceCC = new javax.swing.JButton();
        choiceBB = new javax.swing.JButton();
        choiceDD = new javax.swing.JButton();
        choiceC = new javax.swing.JLabel();
        choiceB = new javax.swing.JLabel();
        choiceD = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        questionField.setColumns(20);
        questionField.setFont(new java.awt.Font("Tw Cen MT", 0, 24)); // NOI18N
        questionField.setRows(5);
        questionField.setText("question");
        jScrollPane1.setViewportView(questionField);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 210, 800, 180));

        choiceA.setBackground(new java.awt.Color(255, 255, 255));
        choiceA.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        choiceA.setText("?");
        choiceA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                choiceAMouseClicked(evt);
            }
        });
        getContentPane().add(choiceA, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 470, 290, 50));

        choiceAA.setFont(new java.awt.Font("Tw Cen MT", 1, 36)); // NOI18N
        choiceAA.setText("A.");
        choiceAA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceAAActionPerformed(evt);
            }
        });
        getContentPane().add(choiceAA, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 470, 70, 50));

        choiceCC.setFont(new java.awt.Font("Tw Cen MT", 1, 36)); // NOI18N
        choiceCC.setText("C.");
        choiceCC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceCCActionPerformed(evt);
            }
        });
        getContentPane().add(choiceCC, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 660, 70, 50));

        choiceBB.setFont(new java.awt.Font("Tw Cen MT", 1, 36)); // NOI18N
        choiceBB.setText("B.");
        choiceBB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceBBActionPerformed(evt);
            }
        });
        getContentPane().add(choiceBB, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 470, 70, 50));

        choiceDD.setFont(new java.awt.Font("Tw Cen MT", 1, 36)); // NOI18N
        choiceDD.setText("D.");
        choiceDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceDDActionPerformed(evt);
            }
        });
        getContentPane().add(choiceDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 660, 70, 50));

        choiceC.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        choiceC.setText("?");
        getContentPane().add(choiceC, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 660, 290, 50));

        choiceB.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        choiceB.setText("?");
        getContentPane().add(choiceB, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 470, 270, 50));

        choiceD.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        choiceD.setText("?");
        getContentPane().add(choiceD, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 660, 290, 50));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/choice.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 20, 500, 230));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/papebackgrnd.jpg"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        // TODO add your handling code here:

    }//GEN-LAST:event_formFocusGained

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowActivated

    private void choiceBBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choiceBBActionPerformed
        Database.getDatabase();
        try {
            String qr = questionField.getText();
            String sql = "select * from choices as a INNER JOIN easyquestions as b ON a.question_id = b.question_id where b.question = '" + qr + "' AND a.correct = 1";
            Database.rs = Database.st.executeQuery(sql);
            scoreTracker st = new scoreTracker();
            stopper sp = new stopper();

            while (Database.rs.next()) {
                String chosenLetter = Database.rs.getString("letter");

                if ("b".equals(chosenLetter)) {
                    Controller control = new Controller();
                    control.OptionPane1();
                    control.getQuestions();
                    this.setVisible(false);
                    scoreTracker.getScore();
                    scoreTracker.getStopper();
                    this.setVisible(true);
                    control.diff = diff3;
                    dispose();
                } else {
                    Controller control = new Controller();
                    control.OptionPane0();
                    control.getQuestions();
                    this.setVisible(false);
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    scoreTracker.score();
                    this.setVisible(true);
                    dispose();
                }
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }

        try {
            String qr = questionField.getText();
            String sql = "select * from choices as a INNER JOIN mediumquestions as b ON a.question_id = b.question_id where b.question = '" + qr + "' AND a.correct = 1";
            Database.rs = Database.st.executeQuery(sql);
            scoreTracker st = new scoreTracker();
            stopper sp = new stopper();

            while (Database.rs.next()) {
                String chosenLetter = Database.rs.getString("letter");

                if ("b".equals(chosenLetter)) {
                    Controller control = new Controller();
                    control.OptionPane1();
                    control.getQuestions();
                    scoreTracker.getScore();
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    dispose();
                } else {
                    Controller control = new Controller();
                    control.OptionPane0();
                    control.getQuestions();
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    scoreTracker.score();
                    dispose();
                }
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }

        try {
            String qr = questionField.getText();
            String sql = "select * from choices as a INNER JOIN hardquestions as b ON a.question_id = b.question_id where b.question = '" + qr + "' AND a.correct = 1";
            Database.rs = Database.st.executeQuery(sql);
            scoreTracker st = new scoreTracker();
            stopper sp = new stopper();

            while (Database.rs.next()) {
                String chosenLetter = Database.rs.getString("letter");

                if ("b".equals(chosenLetter)) {
                    Controller control = new Controller();
                    control.OptionPane1();
                    control.getQuestions();
                    scoreTracker.getScore();
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    dispose();
                } else {
                    Controller control = new Controller();
                    control.OptionPane0();
                    control.getQuestions();
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    scoreTracker.score();
                    dispose();
                }
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_choiceBBActionPerformed

    private void choiceAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_choiceAMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_choiceAMouseClicked

    private void choiceAAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choiceAAActionPerformed
        Database.getDatabase();
        try {
            String qr = questionField.getText();
            String sql = "select * from choices as a INNER JOIN easyquestions as b ON a.question_id = b.question_id where b.question = '" + qr + "' AND a.correct = 1";
            Database.rs = Database.st.executeQuery(sql);
            scoreTracker st = new scoreTracker();
            stopper sp = new stopper();

            while (Database.rs.next()) {
                String chosenLetter = Database.rs.getString("letter");

                if ("a".equals(chosenLetter)) {
                    Controller control = new Controller();
                    control.OptionPane1();
                    control.getQuestions();
                    scoreTracker.getScore();
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    dispose();
                } else {
                    Controller control = new Controller();
                    control.OptionPane0();
                    control.getQuestions();
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    scoreTracker.score();
                    dispose();
                }
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }

        try {
            String qr = questionField.getText();
            String sql = "select * from choices as a INNER JOIN mediumquestions as b ON a.question_id = b.question_id where b.question = '" + qr + "' AND a.correct = 1";
            Database.rs = Database.st.executeQuery(sql);
            scoreTracker st = new scoreTracker();
            stopper sp = new stopper();

            while (Database.rs.next()) {
                String chosenLetter = Database.rs.getString("letter");

                if ("a".equals(chosenLetter)) {
                    Controller control = new Controller();
                    control.OptionPane1();
                    control.getQuestions();
                    scoreTracker.getScore();
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    dispose();
                } else {
                    Controller control = new Controller();
                    control.OptionPane0();
                    control.getQuestions();
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    scoreTracker.score();
                    dispose();
                }
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }

        try {
            String qr = questionField.getText();
            String sql = "select * from choices as a INNER JOIN hardquestions as b ON a.question_id = b.question_id where b.question = '" + qr + "' AND a.correct = 1";
            Database.rs = Database.st.executeQuery(sql);
            scoreTracker st = new scoreTracker();
            stopper sp = new stopper();

            while (Database.rs.next()) {
                String chosenLetter = Database.rs.getString("letter");

                if ("a".equals(chosenLetter)) {
                    Controller control = new Controller();
                    control.OptionPane1();
                    control.getQuestions();
                    scoreTracker.getScore();
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    dispose();
                } else {
                    Controller control = new Controller();
                    control.OptionPane0();
                    control.getQuestions();
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    scoreTracker.score();
                    dispose();
                }
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_choiceAAActionPerformed

    private void choiceCCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choiceCCActionPerformed
        Database.getDatabase();
        try {
            String qr = questionField.getText();
            String sql = "select * from choices as a INNER JOIN easyquestions as b ON a.question_id = b.question_id where b.question = '" + qr + "' AND a.correct = 1";
            Database.rs = Database.st.executeQuery(sql);
            scoreTracker st = new scoreTracker();
            stopper sp = new stopper();

            while (Database.rs.next()) {
                String chosenLetter = Database.rs.getString("letter");

                if ("c".equals(chosenLetter)) {
                    Controller control = new Controller();
                    control.OptionPane1();
                    control.getQuestions();
                    scoreTracker.getScore();
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    dispose();
                } else {
                    Controller control = new Controller();
                    control.OptionPane0();
                    control.getQuestions();
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    scoreTracker.score();
                    dispose();
                }
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }

        try {
            String qr = questionField.getText();
            String sql = "select * from choices as a INNER JOIN mediumquestions as b ON a.question_id = b.question_id where b.question = '" + qr + "' AND a.correct = 1";
            Database.rs = Database.st.executeQuery(sql);
            scoreTracker st = new scoreTracker();
            stopper sp = new stopper();

            while (Database.rs.next()) {
                String chosenLetter = Database.rs.getString("letter");

                if ("c".equals(chosenLetter)) {
                    Controller control = new Controller();
                    control.OptionPane1();
                    control.getQuestions();
                    scoreTracker.getScore();
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    dispose();
                } else {
                    Controller control = new Controller();
                    control.OptionPane0();
                    control.getQuestions();
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    scoreTracker.score();
                    dispose();
                }
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }

        try {
            String qr = questionField.getText();
            String sql = "select * from choices as a INNER JOIN hardquestions as b ON a.question_id = b.question_id where b.question = '" + qr + "' AND a.correct = 1";
            Database.rs = Database.st.executeQuery(sql);
            scoreTracker st = new scoreTracker();
            stopper sp = new stopper();

            while (Database.rs.next()) {
                String chosenLetter = Database.rs.getString("letter");

                if ("c".equals(chosenLetter)) {
                    Controller control = new Controller();
                    control.OptionPane1();
                    control.getQuestions();
                    scoreTracker.getScore();
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    dispose();
                } else {
                    Controller control = new Controller();
                    control.OptionPane0();
                    control.getQuestions();
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    scoreTracker.score();
                    dispose();
                }
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_choiceCCActionPerformed

    private void choiceDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choiceDDActionPerformed
        Database.getDatabase();
        try {
            String qr = questionField.getText();
            String sql = "select * from choices as a INNER JOIN easyquestions as b ON a.question_id = b.question_id where b.question = '" + qr + "' AND a.correct = 1";
            Database.rs = Database.st.executeQuery(sql);
            scoreTracker st = new scoreTracker();
            stopper sp = new stopper();

            while (Database.rs.next()) {
                String chosenLetter = Database.rs.getString("letter");

                if ("d".equals(chosenLetter)) {
                    Controller control = new Controller();
                    control.OptionPane1();
                    control.getQuestions();
                    scoreTracker.getScore();
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    dispose();
                } else {
                    Controller control = new Controller();
                    control.OptionPane0();
                    control.getQuestions();
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    scoreTracker.score();
                    dispose();
                }
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }

        try {
            String qr = questionField.getText();
            String sql = "select * from choices as a INNER JOIN mediumquestions as b ON a.question_id = b.question_id where b.question = '" + qr + "' AND a.correct = 1";
            Database.rs = Database.st.executeQuery(sql);
            scoreTracker st = new scoreTracker();
            stopper sp = new stopper();

            while (Database.rs.next()) {
                String chosenLetter = Database.rs.getString("letter");

                if ("d".equals(chosenLetter)) {
                    Controller control = new Controller();
                    control.OptionPane1();
                    control.getQuestions();
                    scoreTracker.getScore();
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    dispose();
                } else {
                    Controller control = new Controller();
                    control.OptionPane0();
                    control.getQuestions();
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    scoreTracker.score();
                    dispose();
                }
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }

        try {
            String qr = questionField.getText();
            String sql = "select * from choices as a INNER JOIN hardquestions as b ON a.question_id = b.question_id where b.question = '" + qr + "' AND a.correct = 1";
            Database.rs = Database.st.executeQuery(sql);
            scoreTracker st = new scoreTracker();
            stopper sp = new stopper();

            while (Database.rs.next()) {
                String chosenLetter = Database.rs.getString("letter");

                if ("d".equals(chosenLetter)) {
                    Controller control = new Controller();
                    control.OptionPane1();
                    control.getQuestions();
                    scoreTracker.getScore();
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    dispose();
                } else {
                    Controller control = new Controller();
                    control.OptionPane0();
                    control.getQuestions();
                    scoreTracker.getStopper();
                    control.diff = diff3;
                    scoreTracker.score();
                    dispose();
                }
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_choiceDDActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(choiceQuestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(choiceQuestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(choiceQuestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(choiceQuestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new choiceQuestion().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel choiceA;
    private javax.swing.JButton choiceAA;
    private javax.swing.JLabel choiceB;
    private javax.swing.JButton choiceBB;
    private javax.swing.JLabel choiceC;
    private javax.swing.JButton choiceCC;
    private javax.swing.JLabel choiceD;
    private javax.swing.JButton choiceDD;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea questionField;
    // End of variables declaration//GEN-END:variables

}
